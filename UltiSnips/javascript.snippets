priority -50

snippet . "Expand objects" i
.${1:variable} = $1;
endsnippet

snippet /**
/**
 * ${1:description} ${0}
 *
 * @param {${2:type}} ${3:name} $1
 * @return {$2} $1
 */
endsnippet

snippet @pa
@param {${1:type}} ${2:name} ${3:description}
endsnippet

snippet @re
@return {${1:type}} ${2:description}
endsnippet

snippet ao
[
	{
		'${1:key}' : $1,
	}
]
endsnippet

snippet be
beforeEach(function () {
	test.result = 1;
});
endsnippet

snippet br
$rootScope.$broadcast(${1:eventName}, ${2:eventData});
endsnippet

snippet ce
console.error('${0:error}');
endsnippet

snippet cl
console.log('${0:log}');
endsnippet

snippet ct
ctrl.${1:variable} = $1;
endsnippet

snippet db
debugger;
endsnippet

snippet de
describe('with ${1:conditions}', function () {
	beforeEach(function () {
		test.result = 1;
	});

	it('should ${2:expect}', function () {
		${0:expect(test.result).toBe(1);}
	});
});
endsnippet

snippet el
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet

snippet ei
if (${1:true}) {
	${2}
} else if (${3:true) {
	${4}
} else {
	${0}
}
endsnippet

snippet er
throw new Error('${1:error message}');
endsnippet

snippet es
expect(${1:spyFunction}).toHaveBeenCalledWith(${2:arguments});
endsnippet

snippet fa
for (${1:i} = 0; $1 < ${2:array}.length; $1++) {
	${3:item} = $2[$1];
}
endsnippet

snippet fo
for (${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet

snippet if
if (${1:true}) {
	${0}
}
endsnippet

snippet it
it('should ${1:expect}', function () {
	${0:expect(1).toBe(1);}
});
endsnippet

snippet jp
JSON.parse(${0:jstr});
endsnippet

snippet js
JSON.stringify(${0:object});
endsnippet

snippet okf
'${1:functionName}' : function $1() {},
endsnippet

snippet oks
'${1:spyFunction}' : spyOn(${2:spyObject}, '$1').and.callThrough(),
endsnippet

snippet okv
'${1:key}' : $1,
endsnippet

snippet oos
'${1:spyObject}' : {
	'${2:spyFunction}' : spyOn($1, '$2').and.callThrough(),
},
endsnippet

snippet on
$scope.$on(${1:eventName}, ${2:cb});
endsnippet

snippet sc
$scope.${1:variable} = $1;
endsnippet

snippet sp
spyOn(${1:object}, '${2:method}').and.callThrough();
endsnippet

snippet rv
return ${0:result};
endsnippet

snippet ro
return {
	'${1:prop}' : $1
};
endsnippet

snippet sw
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet th
this.${1:variable} = $1;
endsnippet

snippet pr
${1:proto}.prototype.${2:function} = $2;
endsnippet

snippet tr
try {
	${1}
} catch (${2:e}) {
	${3:/* handle error */}
} finally {
	${0:/* handle both */}
}
endsnippet

snippet vo
${1:objectName} = {
	'${2:key}' : $2,
},
endsnippet

snippet vf
${1:functionName} = function $1() {
	return;
},
endsnippet
